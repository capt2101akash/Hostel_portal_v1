(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Error in URI 'auth_user' or database not supported"
p3
sS'layer'
p4
S'/home/akash/web2py/applications/welcome/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n#DAL(uri, migrate=False, fake_migrate=False)\n#DAL(uri, migrate=False, fake_migrate=True)\ndb=DAL(\'auth_user\',migrate=False,fake_migrate=False)\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(myconf.take(\'db.uri\'), pool_size=myconf.take(\'db.pool_size\', cast=int), check_reserved=[\'all\'])\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore+ndb\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.take(\'forms.separator\')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n## (optional) static assets folder versioning\n# response.static_version = \'0.0.0\'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\n#auth.define_tables()\nauth.settings.manager_actions = dict(db_admin=dict(role=\'admin\',heading=\'Managing Registrations\',tables=db.tables))\nauth.settings.extra_fields[\'auth_user\']=[\n    Field(\'gender\',requires=IS_IN_SET([\'Male\',\'Female\'])),\n    Field(\'room_partner\'),\n    Field(\'room_number\'),\n    Field(\'phone_number\',requires=IS_MATCH(\'\\d{10}\')),\n    Field(\'physically_handicapped\',requires=IS_IN_SET([\'Yes\',\'No\'])),\n    Field(\'admission_number\'),\n    Field(\'type_of_account\',requires=IS_IN_SET([\'Student\',\'Faculty\',\'Mess Committee\',\'Super Admin\']))]\nauth.define_tables()\n\'\'\'auth.settings.manager_actions = dict(\n    db_admin=dict(role=\'Super\', heading="Manage Database", tables=db.tables),\n    content_admin=dict(role=\'Content Manager\', tables=[content_db.articles, content_db.recipes, content_db.comments]),\n    content_mgr_grp_v2 = dict(role=\'Content Manager v2\', db=content_db,\n        tables=[\'articles\',\'recipes\',\'comments\'],\n        smartgrid_args=dict(\n                DEFAULT=dict(maxtextlength=50,paginate=30),\n                comments=dict(maxtextlength=100,editable=False)\n        )\n    )\n\'\'\'\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.take(\'smtp.server\')\nmail.settings.sender = myconf.take(\'smtp.sender\')\nmail.settings.login = myconf.take(\'smtp.login\')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = True\nauth.settings.reset_password_requires_verification = True\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n#db=DAL(\'sqlite://storage.sqlite\')\ndb.define_table(\'contact\',\n                Field(\'name\'),\n                Field(\'phone\'))\n#db=DAL(\'sqlite://storage.sqlite\')\ndb.define_table(\'image\',\n                Field(\'title\',unique=True),\n                Field(\'file1\',\'upload\'),\n                format=\'%(title)s\')\ndb.define_table(\'post\',\n                Field(\'image_id\',\'reference image\'),\n                Field(\'author\'),\n                Field(\'email\'),\n                Field(\'body\',\'text\'))\ndb.image.title.requires=IS_NOT_IN_DB(db,db.image.title)\ndb.post.image_id.requires=IS_IN_DB(db,db.image.id, \'%(title)s\')\ndb.post.author.requires=IS_NOT_EMPTY()\ndb.post.email.requires=IS_EMAIL()\ndb.post.body.requires=IS_NOT_EMPTY()\ndb.post.image_id.writable=db.post.image_id.readable=False\n\n\ndb.define_table(\'db_topic\',\n                Field(\'topic_title\',unique=True),\n                Field(\'topic_doc\',\'upload\'))\ndb.define_table(\'db_post\',\n                Field(\'discussion_id\',\'reference db_topic\'),\n                Field(\'post_author\'),\n                Field(\'post_email\'),\n                Field(\'post_body\',\'text\'))\ndb.db_topic.topic_title.requires=IS_NOT_IN_DB(db,db.db_topic.topic_title)\ndb.db_post.post_author.requires=IS_NOT_EMPTY()\ndb.db_post.post_email.requires=IS_EMAIL()\ndb.db_post.discussion_id.writable=db.db_post.discussion_id.readable=False\n\ndb.define_table(\'complaintregister\',\n                Field(\'complain_title\'),\n                #Field(\'Complained On\',\'datetime\'),\n                Field(\'Complain_proofs\',\'upload\'))\ndb.define_table(\'complainpost\',\n                Field(\'complain_id\',\'reference complaintregister\'),\n                Field(\'complained_by\'),\n                Field(\'complained_on\',\'datetime\'),\n                Field(\'complain\',\'text\'))\ndb.complaintregister.complain_title.requires=IS_NOT_IN_DB(db,db.complaintregister.complain_title)\ndb.complainpost.complained_by.requires=IS_NOT_EMPTY()\ndb.complainpost.complain_id.writable=db.complainpost.complain_id.readable=False\n\ndb.define_table(\'room_change\',\n                Field(\'who_want_to_change_room\',\'datetime\'),\n                Field(\'present_room\',\'text\'),\n                Field(\'change_room_to\',\'text\'))\n\'\'\'from gluon.tools import *\nauth=Auth(db)\nauth.define_tables()\ncrud = Crud(db)\n\ndb.define_table(\'wiki_page\',\n                Field(\'wiki_title\'),\n                Field(\'wiki_body\',\'text\'),\n                Field(\'created_on\',\'datetime\',default=request.now),\n                Field(\'created_by\',\'reference auth_user\',default=auth.user_id),\n                format=\'%(wiki_title)s\')\n\ndb.define_title(\'wiki_post\',\n                Field(\'page_id\',\'reference wiki_page\'),\n                Field(\'wiki_body\',\'text\'),\n                Field(\'created_on\',\'datetime\',default=request.now),\n                Field(\'created_by\',\'reference auth_user\',default=auth.user_id))\n\ndb.define_table(\'document\',\n                Field(\'wiki_page_id\',\'reference wiki_page\'),\n                Field(\'name\'),\n                Field(\'wiki_file\',\'upload\'),\n                Field(\'created_on\',\'datetime\',default=request.now),\n                Field(\'created_by\',\'reference auth_user\',default=auth.user_id),\n                format=\'%(title)s\')\ndb.wiki_page.wiki_title.requires = IS_NOT_IN_DB(db, \'wiki_page.wiki_title\')\ndb.wiki_page.wiki_body.requires = IS_NOT_EMPTY()\ndb.wiki_page.created_by.readable = db.wiki_page.created_by.writable = False\ndb.wiki_page.created_on.readable = db.wiki_page.created_on.writable = False\ndb.wiki_post.wiki_body.requires = IS_NOT_EMPTY()\ndb.wiki_post.page_id.readable = db.wiki_post.page_id.writable = False\ndb.wiki_post.created_by.readable = db.wiki_post.created_by.writable = False\ndb.wiki_post.created_on.readable = db.wiki_post.created_on.writable = False\ndb.document.name.requires = IS_NOT_IN_DB(db, \'document.name\')\ndb.document.page_id.readable = db.document.page_id.writable = False\ndb.document.created_by.readable = db.document.created_by.writable = False\ndb.document.created_on.readable = db.document.created_on.writable = False\n\'\'\'\n\'\'\'from gluon.tools import Auth\nauth = Auth(db)\nauth.define_tables(username=True)\n\'\'\'\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/akash/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/akash/web2py/applications/welcome/models/db.py", line 19, in <module>\n    db=DAL(\'auth_user\',migrate=False,fake_migrate=False)\n  File "/home/akash/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/home/akash/web2py/gluon/packages/dal/pydal/base.py", line 424, in __init__\n    raise SyntaxError("Error in URI \'%s\' or database not supported" % self._dbname)\nSyntaxError: Error in URI \'auth_user\' or database not supported\n'
p11
s.